#+INCLUDE: "~/CFD_stuff/mainCFDrepo/FiniteVolume/DeGroot/org/settings.org"

* Two and Three Dimensional Grids
** General introduction
   If the grids have an ordered, orthogonal structure, then it is easy to extend what we have done so
   far to higher dimensional grids. \\
   We will discuss *structured* vs *unstructured* grid. The main idea is
   that the labels are associated with _how the grid cells are labeled_, and not their topologies.

   #+begin_export latex
   \begin{center}
   \includegraphics[scale=0.4]{../pic/grid.png}
   \end{center}
   #+end_export
   We can see from the image above that:
   - *structured grid* uses *ordered* row and column labelling
   - *unstructutured grid* uses *arbitrary* cell labelling 
   As a result, for grid with arbitrary polyhedra with no inherent structure, it is better to store
   the grid with an unstructured labelling scheme, as shown below.
   #+begin_export latex
   \begin{center}
   \includegraphics[scale=0.4]{../pic/polyhedra_unstructured.png}
   \end{center}
   #+end_export 
** Structured Grid
*** General Discretization
    The goal is to discretize a generic transport equation over a 2D structured grid. Then we will extend
    from 2D to 3D. Recall our generic transport equation:
    #+begin_export latex
    \begin{equation*}
    \frac{\partial \phi}{\partial t} + \nabla \cdot (\textbf{u}\phi) +
    \nabla \cdot \textbf{J}_{\phi} = S_{\phi}
    \end{equation*}
    #+end_export
    Integrate through space and time, we arrive at:
    #+begin_export latex
    \begin{equation*}
    \frac{\phi^{t+\Delta t / 2} - \phi^{t-\Delta t / 2}}{\Delta t}
    + \sum_{i=0}^{N_{ip}-1} \textbf{u}_{ip}\cdot \textbf{n}_{ip}\phi_{ip}A_{ip}
    = \sum_{i=0}^{N_{ip}-1}\textbf{J}_{\phi,ip}\cdot \textbf{n}_{ip}A_{ip} + S_{\phi}V_P 
    \end{equation*}
    #+end_export
**** Mass Equation
     
     Say we want to make this general form to represent the conservation of mass equation, we set
     $\phi = \rho$, $\textbf{J}_\phi = 0$ and $S_\phi = 0$. Then, using the integration points as
     $w$ (west), $e$ (east), $s$ (south) and $n$ (north), we get:
     #+begin_export latex
     \begin{equation*}
     \frac{\rho ^{t+\Delta t/2}-\rho^{t-\Delta t/2}}{\Delta t} + \dot{m}_e - \dot{m}_w
     + \dot{m}_n - \dot{m}_s = 0
     \end{equation*}
     #+end_export
     For the case of constant density:
     #+begin_export latex
     \begin{equation*}
     \dot{m}_e - \dot{m}_w + \dot{m}_n - \dot{m}_s = 0
     \end{equation*}
     #+end_export
   
**** Momentum Equation
     
     Likewise, to make the general form representing the conservation of momentum in the x-direction,
     we simply set $\phi = \rho u$, $\textbf{J}_\phi = \mu \nabla u$ and $S_\phi = -\partial p/\partial x$. 
     #+begin_export latex
     \begin{equation*}
     \begin{aligned}
     \frac{\rho ^{t+\Delta t/2}-\rho^{t-\Delta t/2}}{\Delta t} + \dot{m}_eu_e - \dot{m}_w&u_w
     + \dot{m}_nu_n - \dot{m}_su_s = \mu \frac{\partial u}{\partial x}\biggr\rvert_e
     - \mu \frac{\partial u}{\partial x}\biggr\rvert_w \\
     &+ \mu \frac{\partial u}{\partial y}\biggr\rvert_n - \mu \frac{\partial u}{\partial y}\biggr\rvert_s
     - \frac{\partial p}{\partial y}V_P
     \end{aligned}
     \end{equation*}
     #+end_export
     The discretization procedure for the momentum equation is as follow:
     - appropriate momentum equation - (mass equation * appropriate velocity component at cell P)
     - choose time integration scheme for the transient term
     - choose advection scheme for the advection term
     - approximate the derivatives using finite differences.

     The momentum equations in x and y can be written in terms of their linearization coefficients:
     #+begin_export latex
     \begin{equation*}
     \begin{aligned}
     &a_p u_p = -a_W u_W - a_E u_E -a_S u_S - a_N u_N + b_u - \frac{p_E-p_W}{2\Delta x}V_P\\
     &a_p v_p = -a_W v_W - a_E v_E -a_S v_S - a_N v_N + b_v - \frac{p_N-p_S}{2\Delta y}V_P
     \end{aligned}
     \end{equation*}
     #+end_export
     Recall back to our 1D case, the pressure can field can oscillate if we are not careful. In 2D,
     this is even worse because the oscillations can happen in both directions. An example of an oscillated
     pressure field but would be accepted by the solver as a smooth pressure field is shown below:
     #+begin_export latex
     \begin{center}
     \includegraphics[scale=0.5]{../pic/2D_smooth.png}
     \end{center}
     #+end_export

     Same as the 1D case, this oscillations can be solved by
     - using staggered grid
     - using collocated grid with different advected and advecting velocities.
     because the staggered grid becomes more complicated at higher dimensions, we only consider
     collocated grid. The resulting expressions for advecting velocities in each direction are as follow:
     #+BEGIN_EXPORT latex
     \begin{equation*}
     \begin{aligned}
     &\hat{u}_e = \frac{1}{2}(u_P + u_E) - \hat{d}_e^u \left[\frac{dp}{dx}\biggr\rvert_e -
     \frac{1}{2}\left(\frac{dp}{dx}\biggr\rvert_P + \frac{dp}{dx}\biggr\rvert_E \right)\right]\\
     &\hat{v}_n = \frac{1}{2}(v_P + v_N) - \hat{d}_n^v \left[\frac{dp}{dy}\biggr\rvert_n -
     \frac{1}{2}\left(\frac{dp}{dy}\biggr\rvert_P + \frac{dp}{dy}\biggr\rvert_N \right)\right]
     \end{aligned}
     \end{equation*}
     #+END_EXPORT
     with the superscript on $\hat{d}$ represents the equation it is associated with. Similar to 1D, the
     coupling can be done direct or seggregated method, e.g. SIMPLE or SIMPLEC


*** False Diffusion
    Recall in 1D, Taylor series analysis shows some serious problem, but they are not as bad. Using
    UDS for linearization and correcting the advective fluxes with a higher order method, we can get
    good results in these cases.\\

    In 2D and 3D, false diffusion comes from a different source than 1D. Usually, this associates with
    cases where flow streamlines are not well aligned with the grid lines. \\

    Consider a steady advection of scalar quantity with *no sources*, real diffusion is *negligible* compare
    to advection.

    #+BEGIN_EXPORT latex
    \begin{equation*}
    \dot{m}_e \phi_e - \dot{m}_w \phi_w + \dot{m}_n \phi_n - \dot{m}_s \phi_s = 0
    \end{equation*}    
    #+END_EXPORT

    Assume positive flow in x and y and using UDS for advection:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \dot{m}_e \phi_P - \dot{m}_w\phi_W + \dot{m}_n \phi_P - \dot{m}_s \phi_S = 0
    \end{equation*}
    #+END_EXPORT

    Solving for $\phi_P$, we get:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \phi_P = \frac{\dot{m}_w}{\dot{m}_e+\dot{m}_n}\phi_W +  \frac{\dot{m}_s}{\dot{m}_e+\dot{m}_n}\phi_S
    \end{equation*}
    #+END_EXPORT

    Consider flow at 45 degrees to the x axis, meaning $\dot{m}_e = \dot{m}_w = \dot{m}_n = \dot{m}_s$,
    we have:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \phi_P = \frac{1}{2}\phi_W + \frac{1}{2}\phi_S
    \end{equation*}
    #+END_EXPORT

    If $\phi = 0$ is advected from the bottom, and $\phi = 1$ is advected from the left. Then the exact
    solution is a step profile at any cross-secion perpendicular to the flow direction:
    #+BEGIN_EXPORT latex
    \begin{center}
    \includegraphics[scale=0.4]{../pic/stepProfile.png}
    \end{center}
    #+END_EXPORT

    Below is the code to solve this problem:
    #+ATTR_LATEX: :options style=mystyle
    #+BEGIN_SRC python :results output :return fname 
      import matplotlib
      import matplotlib.pyplot as plt
      import numpy as np
      matplotlib.use('Agg')
      fname = '../pic/45degreeStep.png'

      # create array to hold the solution
      phi = np.zeros((7,7))

      # set left advected value
      phi[:,0] = 1

      print('Initial matrix:\n')
      print(np.vectorize("%.3f".__mod__)(phi))
      # compute the solution starting from the bottom left
      for j in reversed(range(phi.shape[0]-1)):
          for i in range(1,phi.shape[1]):
              phi[j,i] = 0.5*phi[j,i-1] + 0.5*phi[j+1,i]

      # print the solution matrix
      print('\nSolution matrix:\n')
      print(np.vectorize("%.3f".__mod__)(phi))

      # plot solution along the diagonal cross-section
      sol = np.diag(phi)
      x = np.array([i for i in range(sol.size)])
      plt.plot(x,sol,'-bx', label='Solution')

      # plot the best possible numerical solution based on this grid
      best = np.where(x < x.size/2.0,1,0)
      plt.plot(x , best, '-rs',label = 'Best Numerical')

      # plot exact solution on fine grid
      x_exact = np.linspace(0,x.size,1000)
      exact = np.where(x_exact < x.size/2.0,1,0)
      plt.plot(x_exact, exact, 'k-',label = 'Exact')

      plt.legend()
      plt.savefig(fname)

    #+END_SRC

    #+RESULTS:
    #+begin_example
    Initial matrix:

    [['1.000' '0.000' '0.000' '0.000' '0.000' '0.000' '0.000']
     ['1.000' '0.000' '0.000' '0.000' '0.000' '0.000' '0.000']
     ['1.000' '0.000' '0.000' '0.000' '0.000' '0.000' '0.000']
     ['1.000' '0.000' '0.000' '0.000' '0.000' '0.000' '0.000']
     ['1.000' '0.000' '0.000' '0.000' '0.000' '0.000' '0.000']
     ['1.000' '0.000' '0.000' '0.000' '0.000' '0.000' '0.000']
     ['1.000' '0.000' '0.000' '0.000' '0.000' '0.000' '0.000']]

    Solution matrix:

    [['1.000' '0.984' '0.938' '0.855' '0.746' '0.623' '0.500']
     ['1.000' '0.969' '0.891' '0.773' '0.637' '0.500' '0.377']
     ['1.000' '0.938' '0.812' '0.656' '0.500' '0.363' '0.254']
     ['1.000' '0.875' '0.688' '0.500' '0.344' '0.227' '0.145']
     ['1.000' '0.750' '0.500' '0.312' '0.188' '0.109' '0.062']
     ['1.000' '0.500' '0.250' '0.125' '0.062' '0.031' '0.016']
     ['1.000' '0.000' '0.000' '0.000' '0.000' '0.000' '0.000']]
    #+end_example

    #+BEGIN_EXPORT latex
    \begin{center}
    \includegraphics[scale=0.8]{../pic/45degreeStep.png}
    \end{center}
    #+END_EXPORT

    We can see that the solution looks quite diffusive. Because there is no actual diffusion, all of this
    represents false diffusion. To get a good solution, the false diffusion coefficient $\Gamma_{false}$ should
    much less than the real diffusion coefficient $\Gamma_{real}$.

    In 2D, our false diffusion coefficient looks like this:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \Gamma_{false} = \frac{\rho |\textbf{u}|\Delta x \Delta y sin(2\Theta)}{4(\Delta y sin^3{\Theta} +
    \Delta x cos^3 (\Theta))}
    \end{equation*}
    #+END_EXPORT
    where $\Delta x, \Delta y$ are grid spacing in each direction and $\Theta$ is the angle
    the velocity makes with the x-axis. Here, we plot the values of $\Gamma_{false}$ against
    different values of grid spacing and $\Theta$.
    #+BEGIN_SRC python :results output :return fname
      import matplotlib
      import matplotlib.pyplot as plt
      import numpy as np
      matplotlib.use('Agg')
      fname = '../pic/false_diffusion2D.png'
      # assume velocity, density magnitudes have unit values (1)
      # set parameters of study
      delta = [0.01, 0.05, 0.1]
      theta = np.linspace(0,np.pi/2,100)

      # for tables
      headers = ["delta", "theta", "gamma"]

      # calculate the false diffusion
      for d in delta:
          gamma = d*d*np.sin(2*theta)/4/(d*np.power(np.sin(theta),3) +
                                         d*np.power(np.cos(theta),3))
          plt.plot(theta,gamma,label = "dx = " + str(d))


      print("THETA      GAMMA")
      print("THETA      GAMMA")
      for i,theta_i in enumerate(theta):
          print("%2f | %2f" %(theta_i,gamma[i]) )

      # show the plot
      plt.xlabel(r"$\theta$")
      plt.ylabel(r"$\Gamma_{false}$")
      plt.legend()
      plt.savefig(fname)
    #+END_SRC

    #+RESULTS:
    #+begin_example
    THETA      GAMMA
    0.000000 | 0.000000
    0.015867 | 0.000793
    0.031733 | 0.001588
    0.047600 | 0.002384
    0.063467 | 0.003183
    0.079333 | 0.003986
    0.095200 | 0.004792
    0.111066 | 0.005603
    0.126933 | 0.006419
    0.142800 | 0.007241
    0.158666 | 0.008069
    0.174533 | 0.008904
    0.190400 | 0.009744
    0.206266 | 0.010592
    0.222133 | 0.011446
    0.237999 | 0.012306
    0.253866 | 0.013173
    0.269733 | 0.014045
    0.285599 | 0.014923
    0.301466 | 0.015806
    0.317333 | 0.016693
    0.333199 | 0.017583
    0.349066 | 0.018476
    0.364932 | 0.019369
    0.380799 | 0.020261
    0.396666 | 0.021152
    0.412532 | 0.022039
    0.428399 | 0.022920
    0.444266 | 0.023793
    0.460132 | 0.024656
    0.475999 | 0.025506
    0.491866 | 0.026341
    0.507732 | 0.027158
    0.523599 | 0.027954
    0.539465 | 0.028726
    0.555332 | 0.029470
    0.571199 | 0.030185
    0.587065 | 0.030866
    0.602932 | 0.031510
    0.618799 | 0.032114
    0.634665 | 0.032675
    0.650532 | 0.033189
    0.666398 | 0.033655
    0.682265 | 0.034069
    0.698132 | 0.034428
    0.713998 | 0.034731
    0.729865 | 0.034976
    0.745732 | 0.035161
    0.761598 | 0.035285
    0.777465 | 0.035348
    0.793331 | 0.035348
    0.809198 | 0.035285
    0.825065 | 0.035161
    0.840931 | 0.034976
    0.856798 | 0.034731
    0.872665 | 0.034428
    0.888531 | 0.034069
    0.904398 | 0.033655
    0.920265 | 0.033189
    0.936131 | 0.032675
    0.951998 | 0.032114
    0.967864 | 0.031510
    0.983731 | 0.030866
    0.999598 | 0.030185
    1.015464 | 0.029470
    1.031331 | 0.028726
    1.047198 | 0.027954
    1.063064 | 0.027158
    1.078931 | 0.026341
    1.094797 | 0.025506
    1.110664 | 0.024656
    1.126531 | 0.023793
    1.142397 | 0.022920
    1.158264 | 0.022039
    1.174131 | 0.021152
    1.189997 | 0.020261
    1.205864 | 0.019369
    1.221730 | 0.018476
    1.237597 | 0.017583
    1.253464 | 0.016693
    1.269330 | 0.015806
    1.285197 | 0.014923
    1.301064 | 0.014045
    1.316930 | 0.013173
    1.332797 | 0.012306
    1.348664 | 0.011446
    1.364530 | 0.010592
    1.380397 | 0.009744
    1.396263 | 0.008904
    1.412130 | 0.008069
    1.427997 | 0.007241
    1.443863 | 0.006419
    1.459730 | 0.005603
    1.475597 | 0.004792
    1.491463 | 0.003986
    1.507330 | 0.003183
    1.523196 | 0.002384
    1.539063 | 0.001588
    1.554930 | 0.000793
    1.570796 | 0.000000
    #+end_example


    #+BEGIN_EXPORT latex
    \begin{center}
    \includegraphics[scale=0.8]{../pic/false_diffusion2D.png}
    \end{center}
    #+END_EXPORT
    _Note_:
    + when flow is essentially parallel to the grid lines, the false diffusion is zero. 
    + False diffusion is most severe (highest) when the flow is at 45 degrees ($\frac{pi}{2} \approx 0.8$) 
    + Refining the grid spacing reduces the diffusion.
    + To improve accuracy: use higher order advection schemes (reduce effects of false diffusion) and ensure
      grid is fine enough.
** Non-Orthogonal Unstructured Grid
   - There is no natural ordering available in an unstructured grid.
   - In structured grid, the next neighboring control volume can be found by shifting the current cell
     index.  In unstructured grid, we need a map that stores the cell connnectivity. In other words, each cell
     needs a list of all of its neighboring cells.
   - Problems include grid geometry, interpolation and gradient reconstruction
*** Grid Geometry
    We have a set of points representing the corners of the control volume. These points are connected by
    edges, defining a set of faces. Each face belongs to 2 control volumes, one on each side.\\

    To calculate the grid geometry, we start with the faces and build the volumes. Assume that the faces are
    arbitrary polygons, these combine to make arbitrary polyhedral control volumes.\\

    First, we start by choosing an arbitray corner node, then we connect it with the other corner nodes,
    creating a set of triangular faces. The area of each triangle can be calculated using cross products.\\

    #+BEGIN_EXPORT latex
    \begin{center}
    \includegraphics[scale=1.5]{../pic/SubFaces.png}
    \end{center}
    #+END_EXPORT

    
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \begin{aligned}
    A_0 &= \frac{1}{2} || (\textbf{x}_1 - \textbf{x}_0) \times (\textbf{x}_2 - \textbf{x}_0) ||\\
    A_1 &= \frac{1}{2} || (\textbf{x}_2 - \textbf{x}_0) \times (\textbf{x}_3 - \textbf{x}_0) ||\\
    A_2 &= \frac{1}{2} || (\textbf{x}_3 - \textbf{x}_0) \times (\textbf{x}_4 - \textbf{x}_0) ||
    \end{aligned}
    \end{equation*}    
    #+END_EXPORT

    In general, for triangle with index $i$:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    A_i = \frac{1}{2} || (\textbf{x}_{i+1} - \textbf{x}_0) \times (\textbf{x}_{i+2} - \textbf{x}_0) ||
    \end{equation*}
    #+END_EXPORT

    For even more general case with $N_c$ corner nodes, the total area associated with the integration point
    $ip$ is calculated as:

    #+BEGIN_EXPORT latex
    \begin{equation*}
    A_{ip} = \sum_{i=0}^{N_c - 2} A_i = \frac{1}{2}\sum_{i=0}^{N_c - 2} || (\textbf{x}_{i+1}-x_0) \times
    (\textbf{x}_{i+2} - \textbf{x}_0) ||
    \end{equation*}
    #+END_EXPORT

    Recall the centroid of the face, which is the location of the integration point.  To find this centroid, we
    use the *area-weighted average* of the centroid for *each sub-divided* triangular faces, defined above.
    The centroid of a triangle is defined by the average of its corner positions:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \textbf{x}_{c,i} = \frac{1}{3}(\textbf{x}_i + \textbf{x}_{i+1} + \textbf{x}_{i+2})
    \end{equation*}
    #+END_EXPORT
    with $i = 0,1,..., N_{c}-2$. It follows that the integration point is:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \textbf{x}_{ip} = \frac{1}{A_{ip}}\sum_{i=0}^{N_c - 2} A_i \textbf{x}_{c,i}
    \end{equation*}
    #+END_EXPORT
    For the normal vector from he face, we can calculate similarly to the face area. This is because the cross
    product define vectors normal to each triangular sub-face. The unit normal vector can be obtained by:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \textbf{n}_i = \frac{(\textbf{x}_{i+1}-\textbf{x}_0) \times (\textbf{x}_{i+2}-\textbf{x}_0) }
    {||(\textbf{x}_{i+1}-\textbf{x}_0) \times (\textbf{x}_{i+2}-\textbf{x}_0) || }
    \end{equation*}
    #+END_EXPORT
    The normal vector at the integration point is calculated usin the an area-weighted average:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \textbf{n}_{ip} = \frac{1}{A_{ip}}\sum_{i=0}^{N_c -2}A_i \textbf{n}_i
    \end{equation*}
    #+END_EXPORT
    _Note_: This is assuming the faces are nearly planar.  If they are warped, we need to repeat this process
    (calculate $\textbf{n}_i$ then calculate $\textbf{n}_{ip}$) for different choice of $x_0$ until we get
    the best possible estimate of the normal vector.

    Next, recall the volume of the cell is calculated as:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    V_P = \int_{V}dV
    \end{equation*}
    #+END_EXPORT
    We want to relate this integral to the face geometry. Using the following relation:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \nabla \cdot \textbf{x} = \frac{\partial x}{\partial x} + \frac{\partial y}{\partial y}
    + \frac{\partial z}{\partial z} = 3
    \end{equation*}
    #+END_EXPORT
    so the volume integral can be re-written as:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    V_P = \frac{1}{3}\int_{V}\nabla \cdot \textbf{x} dV
    \end{equation*}
    #+END_EXPORT
    By doing it this way, we introduce a divergence operator into the volume integral. This can then be
    transformed into a surface integral by Gauss' theorem:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    V_P = \frac{1}{3}\int_{S}\textbf{x} \cdot \textbf{n}dS
    \end{equation*}
    #+END_EXPORT
    or as a discrete summation over all of the integration points:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    V_P = \frac{1}{3}\sum_{ip=0}^{N_{ip}-1}\textbf{x}_{ip,i}\cdot \textbf{n}_{ip,i}A_{ip,i}
    \end{equation*}
    #+END_EXPORT
    Recall the centroid of a volume $P$ is given as:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \textbf{x}_P = \frac{1}{V_P}\int_{V}\textbf{x}dV
    \end{equation*}
    #+END_EXPORT
    Similar to before, we like to express quantity under integral to involve some divergence operator, so that
    we can use Gauss' theorem to transform it into an area integral. This time, we rely on this trick:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \nabla \cdot (\textbf{x}\textbf{x}) = \textbf{x}\nabla \cdot \textbf{x} + \textbf{x}\cdot \nabla \textbf{x}
    \end{equation*}
    #+END_EXPORT
    The first term on the RHS involves $\nabla \cdot \textbf{x}$ which we already showed to equal to 3.
    So, we can write:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \nabla \cdot (\textbf{x}\textbf{x}) = 3\textbf{x} + \textbf{x}\cdot \nabla \textbf{x}
    \end{equation*}
    #+END_EXPORT
    The second term on the RHS can be expanded as follow:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \begin{aligned}
    \textbf{x}\cdot\nabla \textbf{x} &= \left(x \frac{\partial}{\partial x} +
    y \frac{\partial}{\partial y} + z \frac{\partial}{\partial z}   \right) \textbf{x} \\
    & = \left(x \frac{\partial \textbf{x}}{\partial x} +
    y \frac{\partial \textbf{x}}{\partial y} + z \frac{\partial \textbf{x}}{\partial z}   \right) \\
    &= x\left( \begin{bmatrix} 1\\ 0\\ 0  \end{bmatrix}
    + y \begin{bmatrix} 0\\ 1\\ 0  \end{bmatrix}
    + z \begin{bmatrix} 0\\ 0\\ 1  \end{bmatrix}
    \right) = \begin{bmatrix} x\\ y\\ z\end{bmatrix} \\
    &= \textbf{x}
    \end{aligned}
    \end{equation*}
    #+END_EXPORT
    As a result:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \nabla \cdot (\textbf{x}\textbf{x}) = 4\textbf{x}
    \end{equation*}
    #+END_EXPORT
    Now, we can rewrite the expression for the cell centroid:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \textbf{x}_P = \frac{1}{4V_P}\int_{V}\nabla \cdot (\textbf{x}\textbf{x})dV
    = \frac{1}{4V_P}\int_{S}(\textbf{x}\textbf{x})\cdot \textbf{n}dS
    \end{equation*}
    #+END_EXPORT
    Same as before, we express as a discrete summation over the integration points:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \textbf{x}_P = \frac{1}{4V_P}\sum_{ip=0}^{N_{ip}-1}\textbf{x}_{ip,i}\textbf{x}_{ip,i}\cdot
    \textbf{n}_{ip,i}A_{ip,i}
    \end{equation*}
    #+END_EXPORT
    Thus, we can define all the required face and cell geometry for unstructured grid calculations.
*** Interpolation
    To do interpolations, we define the following variables for a particular control volume face (diagram):
    #+BEGIN_EXPORT latex
    \begin{center}
    \includegraphics[scale=1.7]{../pic/NotationDiagram.png}
    \end{center}
    #+END_EXPORT
    | Label               | Description                                                 |
    |---------------------+-------------------------------------------------------------|
    | *P*                   | control volume under consideration                          |
    | $nb$                | Neighboring control volume sharing the face containing $ip$ |
    | $ip$                | Integration point location (face centroid)                  |
    | $f$                 | Point along the vector connecting $P$ to $nb$               |
    | $\textbf{D}_{P,nb}$ | Displacement vector from $P$ to $nb$                        |
    | $\textbf{D}_{f,ip}$ | Displacement vector from $f$ to $ip$                        |
    |---------------------+-------------------------------------------------------------|

    _Note_: $f$ could be anywhere along $\textbf{D}_{P,nb}$ but best to make it so $\textbf{D}_{P,nb}$
    perpendicular to $\textbf{D}_{f,ip}$, i.e. $\textbf{D}_{f,ip} \cdot \textbf{D}_{P,nb} = 0$. This minimizes
    $\textbf{D}_{f,ip}$ which will also minimize the gradient correction term. In addition,
    if the grid is orthogonal, then this makes sure that $\textbf{D}_{f,ip}$ is exactly zero.

    We define the quantity $f_{ip}$ to represent $f$ as a function of $\textbf{D}_{P,nb}$:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \textbf{x}_f = \textbf{x}_P + f_{ip}\textbf{D}_{P,nb}
    \end{equation*}
    #+END_EXPORT

    A general second order interpolation of a value $\phi$ to the integration point can be formulated as:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \phi_{ip} = (1-f_{ip})\phi_P + f_{ip}\phi_{nb} + \textbf{D}_{f,ip} \cdot \left[
    (1-f_{ip})\nabla \phi \biggr\rvert_P + f_{ip}\nabla \phi \biggr\rvert_{nb}\right]
    \end{equation*}
    #+END_EXPORT

    _Note_:
    - 1st term on RHS is an *inverse distance interpolation* to the point $f$.
    - 2nd term on RHS is *non-orthogonal correction* from $f$ to $ip$. Here, $f$ is estimated
      based on an inverse distance interpolation along $\texbf{D}_{P,nb}$.
*** Gradient Reconstruction
    We focus on the Gauss-based method because they are simple to explain. This method is based on the Gauss'
    theorem, which allows us to write:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    \int_{V} \nabla \phi dV = \int_{S} \phi \textbf{n} dS
    \end{equation*}
    #+END_EXPORT









    
      
    















    































