* TRANSIENT 1D HEAT DIFFUSION
** Problem Definition
   In contrast to the steady case, here we are solving the following transient 1D heat diffusion equation
   #+BEGIN_EXPORT latex
   \begin{equation}
   \frac{\partial (\rho c_p T)}{\partial t} = k \nabla^2 T + S
   \end{equation}
   #+END_EXPORT
   assuming constant $\rho$ and $c_p$
** Discretization
   Integrating the governing equation through space and time yields:
   #+BEGIN_EXPORT latex
   \begin{equation}
   \int_{t_0}^{t_1} \int_{V} \frac{(\partial \rho c_p T)}{\partial t} dt dV = \int_{t_0}^{t_1} \int_{V} k \nabla^2 T dt dV + \int_{t_0}^{t_1} \int_{V} S dt dV
   \end{equation}
   #+END_EXPORT
   By assuming a timestep $\Delta t = t_1 - t_0$, we also assume that the solution is stored at time levels $t$ and later at $t + \Delta t$. Thus, we can assume various profiles for the integrands as functions of time.  Here, we will examine the following:
   * *Fully explicit*: evaluate the integrands on RHS at initial time level, $t_0 = t$.
   * *Fully implicit*: evaluate the integrands on RHS at final time level, $t_1 = t_0 + \Delta t$
   * *Crank Nicolson*: assume a linear profile of the RHS over the interval $\Delta t$. 
   For the LHS, we interchange the order of integration, which results in this, for a control volume $\textbf{P}$:
   #+BEGIN_EXPORT latex
   \begin{equation}
   \int_{t_0}^{t_1} \int_{V} \frac{(\partial \rho c_p T)}{\partial t} dt dV = (\rho c_p T_p)^{t+\Delta t} - (\rho c_p T_p)^t 
   \end{equation}
   #+END_EXPORT
   Recall that for the steady case, the diffusive term is the difference in flux. Here, we add a weighting function $w$ to control the assumed variation of the integrand over the timestep. 
   #+BEGIN_EXPORT latex
    \begin{equation}
   \int_{t_0}^{t_1} \int_{V} k \nabla^2 T dt dV = -\left [\omega(F_e^d)^{t + \Delta t} + (1-\omega)(F_e^d)^t \right ]\Delta t +
   \left [\omega(F_w^d)^{t + \Delta t} + (1-\omega)(F_w^d)^t \right ]\Delta t
   \end{equation}
   #+END_EXPORT
  #+BEGIN_EXPORT latex
  \begin{center}
  \includegraphics[scale=0.3]{../pic/transientHeat_omega.png}
  \end{center}
  #+END_EXPORT
  Grouping the time levels together:
  #+BEGIN_EXPORT latex
  \begin{equation}
   \int_{t_0}^{t_1} \int_{V} k \nabla^2 T dt dV = \left[\omega[F_w^d-F_e^d \right ]^{t+\Delta t}\Delta t +
   (1-\omega)\left [F_w^d - F_e^d \right ]^t\Delta t
  \end{equation}
  #+END_EXPORT
  Assuming no source term, $S = 0$, constant properties and divide by $\Delta t$, our discretized equation becomes
  #+BEGIN_EXPORT latex
  \begin{equation}
 \rho c_p \frac{T_P^{t+\Delta t} - T_P^t}{\Delta t} V_P = \omega \left[F_w^d-F_e^d \right ]^{t+\Delta t} +
   (1-\omega)\left [F_w^d - F_e^d \right ]^t\
  \end{equation}
  #+END_EXPORT
  *_Note_*
  * fully implicit and fully explicit are /1st order/ accurate in time.
  * Crank-Nicolson are /2nd order/ accurate in time.
    * but Crank-Nicolson are /less stable/, cause oscillations.
  * Generally, explicit solutions do not require the solution of a system of equations. All diffusive fluxes are calculated using solution values from previous timestep
  * Implicit requires solution of a linear system at current time step. The same is true for Crank-Nicolson, or any scheme where $0<\omega < 1$
** Analysis of Explicit Scheme
   Recall explicit scheme means $\omega = 0$. Our discretized equation becomes:
   #+BEGIN_EXPORT latex
   \begin{equation}
   \rho c_p \frac{T_P ^{t+\Delta t}}{\Delta t} V_P = [F_w^d-F_e^d]^t + \rho c_p \frac{T_P^t}{\Delta t}V_P 
   \end{equation}
   #+END_EXPORT
   Recall that the fluxes can be defined as:
    #+BEGIN_EXPORT latex
   \begin{alignat}{2}
   F_{e}^d &= - k\frac{T_E-T_P}{\Delta x_{PE}}A_e &&= -D_e(T_E- T_P)\\
   F_{w}^d &= - k\frac{T_P-T_W}{\Delta x_{WP}}A_w &&= -D_w(T_P- T_W)\\
   D_e &= \frac{kA_e}{\Delta x_{PE}}\\
   D_w &= \frac{kA_w}{\Delta x_{WP}}
   \end{alignat}
    #+END_EXPORT
    Thus, our explicit formulation becomes:
   #+BEGIN_EXPORT latex
   \begin{equation}
   \rho c_p \frac{T_P ^{t+\Delta t}}{\Delta t} V_P = D_eT_E^t + D_wT_W^t + \left ( \frac{\rho c_p V_P}{\Delta t} - D_e - D_w \right)T_P^t 
   \end{equation}
   #+END_EXPORT
   To get correct physical influence, the coefficient of $T_P^t$ must be positive, to ensure $\uparrow T_P^t$ leads to $\uparrow T_P^{t+\Delta t}$.
   Therefore, our timestep must be selected such that:
   #+BEGIN_EXPORT latex
   \begin{equation*}
   \frac{\rho c_p V_P}{\Delta t} \geq D_e + D_w 
   \end{equation*}
   #+END_EXPORT
   or
   #+BEGIN_EXPORT latex
   \begin{equation*}
   \Delta t \leq \frac{\rho c_p V_P}{D_e + D_w} = \frac{1}{\frac{D_e}{\rho c_p V_P} + \frac{D_w}{\rho c_p V_P} }
   \end{equation*}
   #+END_EXPORT
   Simplifying further, we assume $V_P = A\Delta x$ where $A$ is the cross-sectional area of the domain at $P$, and $\Delta x$ is the grid spacing.
   Also assuming $A_e, A_w \approx A$
   #+BEGIN_EXPORT latex
   \begin{equation*}
   \frac{D_e}{\rho c_p V_P} \approx \frac{\frac{kA_e}{\Delta x}}{\rho c_p A \Delta x} = \frac{k}{\rho c_p}\frac{1}{\Delta x^2} = \frac{\alpha}{\Delta x^2}
   \end{equation*}
   #+END_EXPORT
   The quantity $\frac{\Delta x^2}{\alpha}$ may be interpreted as the timescale associated with conduction through the face.\\
   For uniform grid, $A_e =
   A_w = A$, the timestep restriction is:
   #+BEGIN_EXPORT latex
   \begin{equation}
   \Delta t \leq \frac{1}{\frac{\alpha}{\Delta x^2} + \frac{\alpha}{\Delta x^2}} = \frac{\Delta x^2}{2\alpha}
   \end{equation}
   #+END_EXPORT
   Note how our timestep is related to the square of the grid size, so the a fine grid will have a very small "$\Delta x^2$".
   To study this, we consider an iron bar with $\alpha = 23.1 \times 10^{-6}$ [$m^2/s$] at various grid sizes:
   #+NAME: explicit_timestep
   |---------------+-----------------|
   | GRID SIZE [m] | TIME STEP [sec] |
   |---------------+-----------------|
   |          0.01 |       2.1645022 |
   |         0.001 |     0.021645022 |
   |        0.0001 |    2.1645022e-4 |
   |       0.00001 |    2.1645022e-6 |
   |---------------+-----------------|
   #+TBLFM: $2=($1^2)/(2*23.1e-6)
   #+begin_src python :var data=explicit_timestep :exports none
     import matplotlib.pyplot as plt
     gridsize = [a[0] for a in data]
     timestep = [a[1] for a in data]
     plt.figsize= (10,6)
     plt.xlabel("GRID SIZE",fontsize=14)
     plt.ylabel("TIME STEP",fontsize=14)
     plt.plot(timestep[1:],gridsize[1:])
     plt.yscale("log")
     plt.xscale("log")
     plt.xticks(fontsize=14)
     plt.yticks(fontsize=14)
     plt.savefig("../pic/explicit_timestep.png")
    #+end_src

    #+RESULTS:
    : None

    #+BEGIN_EXPORT latex
    \begin{center}
    \includegraphics[scale=0.6]{../pic/explicit_timestep.png}
    \end{center}
    #+END_EXPORT
    We can quickly see how the timestep restriction gets worse with increasing grid refinement. As a result, implicit methods are more commonly used
    in practice. Exception would be calculation of turbulent flow using direct numerical simulation (DNS). In this case, explicit method are a good choice
    because they are less expensive per timestep, since no linear system must be solved. 
** Analysis of Fully Implicit Scheme
   Setting $\omega = 1$ for implicit scheme. Our discretized equation becomes:
   #+BEGIN_EXPORT latex
   \begin{equation}
   \rho c_p \frac{T_P ^{t+\Delta t}-T_P^t}{\Delta t} V_P = [-D_w(T_P-T_W) + D_e(T_E-T_P)]^{t+\Delta t} 
   \end{equation}
   #+END_EXPORT
   Drop the superscript $t+\Delta t$ and denotes old value as "o", after rearranging, we have:
   #+BEGIN_EXPORT latex
   \begin{equation}
   \left ( \frac{\rho c_p V_P}{\Delta t} + D_w + D_e \right)T_P = D_wT_W + D_eT_E + \frac{\rho c_p V_P}{\Delta t}T_P^o
   \end{equation}
   #+END_EXPORT
   We can see that none of the coefficients can be come negative when written out this way. Still, we must ensure the timestep is small enough to resolve
   all transient phenomena. In contrast to this fully implicit scheme, the _Crank-Nicholson scheme_ has no formal restriction on $\Delta t$, but still
   produces *oscillatory* at large $\Delta t$. 
** Derivation of Second Order Implicit Scheme
*** General idea
    We consider integration over a special *space-time control volume*, with:
    - the time faces being located at $t-\Delta t/2, t+ \Delta t/2$
    - the solution values are stored at $t, t - \Delta t, t - 2\Delta t$.
    #+BEGIN_EXPORT latex
    \begin{center}
    \includegraphics[scale=0.3]{../pic/cv_2nd_order_implicit.png}
    \end{center}
    #+END_EXPORT
    By using the space-time control volume, the RHS of the discretized equation evaluated at time $t$, can be considered as a
    _representative of the entire timesweep_. The advantages are:
    - we do not need to assume a profile in time, e.g. piecewise constant for fully implicit/explicit, piecewise linear for Crank-Nicholson.
    - no need to store old flux value
    - interpolation depends on the face values:
      - if piecewise constant $\rightarrow$ 1st order scheme
      - if piecewise linear $\rightarrow$ 2nd order scheme
*** Derivation
    Integrate the governing equation over the space-time control volume 
    #+BEGIN_EXPORT latex
    \begin{equation}
    \int_{t-\Delta t/2}^{t+\Delta t/2} \int_{V} \frac{(\partial \rho c_p T)}{\partial t} dt dV =
    \int_{t-\Delta t/2}^{t+\Delta t/2} \int_{V} k \nabla^2 T dt dV + \int_{t-\Delta t/2}^{t+\Delta t/2} \int_{V} S dt dV
    \end{equation}
    #+END_EXPORT
    Resulting in:
    #+BEGIN_EXPORT latex
    \begin{equation}
    (\rho c_p T_p V_p)^{t+\Delta t/2} - (\rho c_p T_p V_p)^{t-\Delta t/2} = [F_w^d-F_e^d]^t \Delta t + S_P^t \Delta t V_P
    \end{equation}
    #+END_EXPORT
    Divide by $\Delta t$, express the diffusive fluxes in terms of $D_w$ and $D_e$, dropping superscripts $t$ for current time:
    #+BEGIN_EXPORT latex
    \begin{equation}
    \frac{(\rho c_p T_P V_P)^{t+\Delta t /2 } - (\rho c_p T_P V_P)^{t-\Delta t /2 }  }{\Delta t} = -D_w (T_P-T_W)
    + D_e (T_E - T_P) + S_P V_P
    \end{equation}
    #+END_EXPORT
    LHS is known, for RHS $\rightarrow$ need to specify values for times $t-\Delta t/2 and $t+\Delta t /2$
    - 1st order time integration scheme
      We assume a *piecewise constant* distribution over each timestep between the face values, resulting in:
      #+BEGIN_EXPORT latex
      \begin{align*}
      T_P^{t-\Delta t /2 } &= T_P^{t-\Delta t }\\
      T_P^{t+\Delta t /2 } &= T_P^{t}
      \end{align*}
      #+END_EXPORT
    - 2nd order time integration scheme
      We assume a *piecewise linear* distribution over each timestep between the face values, resulting in:
      #+BEGIN_EXPORT latex
      \begin{align*}
      T_P^{t-\Delta t /2} &= T_P^{t-\Delta t } + \frac{1}{2}(T_P^{t-\Delta t} - T_P^{t-2\Delta t})\\
      T_P^{t+\Delta t /2} &= T_P^{t} + \frac{1}{2}(T_P^{t} - T_P^{t-\Delta t})\\
      \end{align*}
      #+END_EXPORT
      This is achieved by doing backward interpolation and then forward interpolation on the face values.
      The schematic below shows these interpolations:
      #+BEGIN_EXPORT latex
      \begin{center}
      \includegraphics[scale=0.5]{../pic/2nd_order_implicit_interpolation.png}
      \end{center}
      #+END_EXPORT
      Substituting these relations to the integrated governing equation's LHS:
      - For 1st order scheme:
	#+BEGIN_EXPORT latex
	\begin{equation}
	\frac{(\rho c_p T_P V_P)^{t+\Delta t /2} - (\rho c_p T_P V_P)^{t-\Delta t /2 }}{\Delta t} = \rho c_p V_P \frac{T_P - T_P^o}{\Delta t}
	\end{equation}
	#+END_EXPORT
	_Note_:
	- the superscript for current time is dropped, and superscript for $t-\Delta t$ is replaced by _$o$_ for "old value".
	- also that this is exactly the same as the result for the fully implicit scheme.
      - For 2nd order scheme:
	#+BEGIN_EXPORT latex
	\begin{equation*}
	\frac{(\rho c_p T_P V_P)^{t+\Delta t /2} - (\rho c_p T_P V_P)^{t-\Delta t /2 }}{\Delta t} =
	\rho c_p V_P \frac{T_P + \frac{1}{2}(T_P - T_P^o) - T_P^o - \frac{1}{2}(T_P^o-T_P^{oo})}{\Delta t}
	\end{equation*}
	#+END_EXPORT
	or a more simplified version....
	#+BEGIN_EXPORT latex
	\begin{equation}
	\frac{(\rho c_p T_P V_P)^{t+\Delta t /2} - (\rho c_p T_P V_P)^{t-\Delta t /2 }}{\Delta t} =
	\rho c_p V_P \frac{\frac{3}{2}T_P -2T_P^o + \frac{1}{2}T_P^{oo}}{\Delta t}
	\end{equation}
	#+END_EXPORT
	_Note_:
	- superscript _$oo$_ is used for time value $t-2\Delta t$.
	- unlike Crank-Nicholson's, flux values at previous timestep *do not need to be solved*.
	  Instead, only temperature values at the *previous two time step* need to be retained. 
*** Other Transient Discretization Schemes
    Some higher order schemes are also used such as:
    - Adams-Bashforth (explicit)
    - Adams-Moulton (implicit)
    - Runge-Kutta (implicit or explicit)
*** Linearization
    Recall the cell residual for steady conduction:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    r_P = D_w (T_P - T_W) - D_e (T_E - T_P) - S_PV_P
    \end{equation*}
    #+END_EXPORT
    where $D_e = \frac{kA_e}{\Delta x_{PE}}$, and $D_w = \frac{kA_w}{\Delta x_{WP}}$.
    #+BEGIN_EXPORT latex
    If we apply 1st order implicit to the transient term:
    \begin{equation*}
    r_P = \rho c_p V_P \frac{T_P-T_P^o}{\Delta t}D_w (T_P - T_W) - D_e (T_E - T_P) - S_PV_P
    \end{equation*}
    #+END_EXPORT
    This makes the linearization coefficients to be as follow:
    #+BEGIN_EXPORT latex
    \begin{align*}
    a_P &= \frac{\partial r_P}{\partial T_P} = \frac{\rho c_p V_P}{\Delta t} + D_w + D_e - \frac{\partial S_P}{\partial T_P}V_P\\
    a_W &= \frac{\partial r_P}{\partial T_W} = -D_w\\
    a_E &= \frac{\partial r_P}{\partial T_E} = -D_e  
    \end{align*}
    #+END_EXPORT
    Similar to before, we can form an algebraic equation for each control volume like this:
    #+BEGIN_EXPORT latex
    \begin{equation}
    a_P\delta T_P + a_W\delta T_W + a_E \delta T_E = -r_P 
    \end{equation}
    #+END_EXPORT
    If we apply 2nd order implicit temporal scheme instead, then $a_P$ term would look like this:
    #+BEGIN_EXPORT latex
    \begin{equation*}
    a_P = \frac{\partial r_P}{\partial T_P} = \frac{3}{2}\frac{\rho c_p V_P}{\Delta t} + D_w + D_e - \frac{\partial S_P}{\partial T_P}V_P
    \end{equation*}
    #+END_EXPORT
** Implementation: [[file:1d_heat_diffusion_transient.py][Python code]]
   #+BEGIN_EXPORT latex
   \lstinputlisting[language=Python]{../code/1d_heat_diffusion_transient.py}
   #+END_EXPORT
   #+BEGIN_EXPORT latex
   \clearpage
   #+END_EXPORT
